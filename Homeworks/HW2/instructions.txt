Miniproject 2: Memory Management

The goal of this project is to familiarize oneself with the operation
of the virtual memory component of an operating system.

We have provided you with three components:
   
  A. Actual traces containing the first 1M data memory accesses from
   four different benchmarks.  You'll find these traces in files with
   the .trace suffix. The files contain a time-ordered series of
   memory accesses, described by the 32-bit full virtual memory
   address, followed by the type (Read or Write) of access. The
   traces were collected in a simulated environment where the
   addresses are slightly out of the ordinary -- real OSes do not
   map anything to page 0 in order to catch null pointer dereferences.
   But other than this quirk, the traces come from real programs.

  B. Layout files describing how each executable is laid out in memory.	
   These are the files with the layout suffix. They describe which regions
   of memory are mapped in for the benchmark code, data, heap, stack, and
   dynamic libraries. A properly running program should not contain any 
   addresses in its trace file that fall outside the ranges specified in 
   the layout, and you'll note that this is true for our traces. The layout
   is used to initialize the OS page tables and describe what is allowed 
   and what is not.

  C. Code for a simulator that simulates a single-level page table and 
   paging with a very basic eviction algorithm. The code simulates the
   processing of each memory access, and prints summary statistics every	
   100,000 accesses, and final statistics when the entire trace is done.
   The simulator takes as input the number of physical memory pages
   available, as well as the name of a benchmark to run. It then 
   initializes its page tables according to the layout, and executes
   the trace. You can run it like this "python memsim.py bzip" to
   run the bzip benchmark with the default number of physical pages,
   or like this "python memsim.py 300 bzip" to limit it to just 300
   physical pages.


Your goals for this assignment are as follows:


0. Read and understand the operation of the simulator. Like most real
projects. you are expected to extract the organization, structure, and
functionality of a piece of code by reading it. Please do not ask the
course staff what the code does -- the code itself already answers
that question. Like most real projects, other people's code may seem
odd, as it is likely not how you would have done it -- learning to
understand someone else's code, with its warts and bugs, is a critical
skill. So, if you're stuck, we are here to help, but part of this 
assignment is to figure out what the code is doing and why it is 
doing it that way. 

1. Run the bzip benchmark with the default 1-level page table,
with 320, 316, 314, 312, 310, 300, 290, 280 and 270 physical 
pages, and plot the number of page faults as a function of the
number of physical pages available.

2. Extend the simulator to get an estimate of the running time
of a given trace, based on the following costs:

     i. 100 cycles if the page table entry is present and valid

    ii. 10000 cycles if the page table entry is valid but not
        present, and a free page is immediately available in 
        the physical memory manager.

   iii. if the VM system needs to scan through and examine page table
        entries to find a victim page to evict, each access to examine
        a page table entry costs 100 cycles, plus a fixed cost of
	10000 cycles from (ii) above.

    iv. if the VM system decides to evict a dirty page, it will need
        to write the dirty contents of the page to the disk, incurring
	a 50000 cycle penalty, plus 100 cycles per each page table
	entry access from (iii) above to find the dirty victim, plus
	a fixed cost of 10000 cycles from (ii) above.

Assume that all non-memory related instructions (which do not even 
appear in our trace files) cost 0 cycles. 

Run the bzip benchmark with the default 1-level page table,
with 320, 316, 314, 312, 310, 300, 290, 280 and 270 physical 
pages, and plot the estimated running time of the bzip benchmark
as a function of the number of physical pages available.

3. As you might have noticed, the eviction algorithm used in the
current simulator is not at all sophisticated. Modify it to
approximate LRU replacement. Specifically, use the "access" bits in
each page table entry to find a non-dirty physical page that has not
been accessed in the last ~10000 instructions that is mapped to the
lowest virtual address, and evict it. Where such a page cannot be
located, fall back on a dirty physical page that has not been accessed
in the last ~10000 instructions that is mapped to the lowest virtual
address. Where such a page cannot be located, default to the original
behavior of the code. 

Given what the hardware provides, it is difficult to figure out which
pages have and have not been touched in the last 10K instructions. For
this assignment, you should run a periodic OS task every 10K instructions 
that clears the access bits, and, on eviction, pick a page table entry 
whose access bit is 0. 

Plot the running time of the bzip benchmark again, this time with this 
new eviction algorithm. 

4. Change the 1-level page table implementation to a 2-level page table.
Use 8 bits for the first level, 12 bits for the second, and 12 bits for
the page offset. Plot, as a bar chart and for each of the benchmarks, 
the size of the old 1-level page table and the size of the new 2-level
page table. TO do this, you'll want to copy the 1level code to a new
directory named 2level, and modify it there.

5. OPTIONAL. FOR EXTRA CREDIT ONLY. Develop the best eviction algorithm
you can, using only historical information (i.e. no looking forward in
the trace files), and compare the running time of the bzip benchmark
using your algorithm versus the ones described above. Quantify the 
hardware costs of implementing your algorithm.

--

Please turn in a zip file containing (report.pdf, 1level/*, and 2level/*).
That is, a report.pdf file at the top level, a directory named 1level that
contains the results of task items 1-3 above, and another directory named
2level that contains the result of item 4.


